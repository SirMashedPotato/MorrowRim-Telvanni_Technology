<?xml version="1.0" encoding="utf-8" ?>
<Defs>

  <ThinkTreeDef>
    <defName>MorrowRim_GolemThinkTree</defName>
    <thinkRoot Class="ThinkNode_Priority">
      <subNodes>
        <!-- Keep lying down if we have to -->
        <li Class="ThinkNode_ConditionalMustKeepLyingDown">
          <subNodes>
            <!-- Do a queued job if possible -->
            <li Class="ThinkNode_QueuedJob">
              <inBedOnly>true</inBedOnly>
            </li>

            <!-- Keep lying down -->
            <li Class="JobGiver_KeepLyingDown" />
          </subNodes>
        </li>
        
        <li Class="ThinkNode_Subtree">
          <treeDef>Downed</treeDef>
        </li>
        <li Class="ThinkNode_Subtree">
          <treeDef>BurningResponse</treeDef>
        </li>
        <li Class="ThinkNode_Subtree">
          <treeDef>MentalStateCritical</treeDef>
        </li>
		  
        <!-- React to close melee threat -->
        <li Class="JobGiver_ReactToCloseMeleeThreat" />

        <!-- Do a queued job -->
        <li Class="ThinkNode_QueuedJob" />

		
		<li Class="ThinkNode_Priority">
			<subNodes>
				<li Class="ThinkNode_Tagger">
					<tagToGive>DraftedOrder</tagToGive>
					<subNodes>
						<li Class="JobGiver_MoveToStandable" />
						<li Class="JobGiver_Orders" />
					</subNodes>
				</li>
			</subNodes>
		</li>

        <!-- Wild animals dig out if no path to map edge and starving -->
        <li Class="ThinkNode_ConditionalHasFaction">
          <invert>true</invert>
          <subNodes>
            <li Class="ThinkNode_ConditionalStarving">
              <subNodes>
                <li Class="ThinkNode_ConditionalBodySize">
                  <min>0.7</min>
                  <subNodes>
                    <li Class="ThinkNode_Subtree">
                      <treeDef>DigOutIfCannotReachMapEdge</treeDef>
                    </li>
                  </subNodes>
                </li>
              </subNodes>
            </li>
          </subNodes>
        </li>
        
        <!-- Leave if timed out -->
        <li Class="ThinkNode_ConditionalExitTimedOut">
          <subNodes>
            <li Class="ThinkNode_Tagger">
              <tagToGive>Misc</tagToGive>
              <subNodes>
                <li Class="JobGiver_ExitMapRandom">
                  <defaultLocomotion>Walk</defaultLocomotion>     
                </li>
              </subNodes>
            </li>
          </subNodes>
        </li>

        <!-- Mental state non critical -->
        <li Class="ThinkNode_Subtree">
          <treeDef>MentalStateNonCritical</treeDef>
        </li>

        <!-- Forced goto -->
        <li Class="ThinkNode_ConditionalForcedGoto">
          <subNodes>
            <li Class="ThinkNode_Tagger">
              <tagToGive>Misc</tagToGive>
              <subNodes>
                <li Class="JobGiver_ForcedGoto" />
              </subNodes>
            </li>
          </subNodes>
        </li>
        
        <!-- Lord directives -->
        <li Class="ThinkNode_Subtree">
          <treeDef>LordDuty</treeDef>
        </li>
        
        <!-- Insertion hook for modders -->
        <li Class="ThinkNode_SubtreesByTag">
          <insertTag>Golem_PreMain</insertTag>
        </li>

        <!-- Wild animals leave map in some conditions -->
        <li Class="ThinkNode_ConditionalHasFaction">
          <invert>true</invert>
          <subNodes>
		  
            <!-- Wild animals randomly leave map -->
            <li Class="ThinkNode_ChancePerHour_Constant">
              <mtbDays>60</mtbDays>
              <subNodes>
                <li Class="ThinkNode_Tagger">
                  <tagToGive>Misc</tagToGive>
                  <subNodes>
                    <li Class="JobGiver_ExitMapRandom">
                      <defaultLocomotion>Walk</defaultLocomotion>
                    </li>
                  </subNodes>
                </li>
              </subNodes>
            </li>
          </subNodes>
        </li>

        <!-- Lay eggs you need to -->
        <li Class="JobGiver_LayEgg" />

        <!-- Tame animal -->
        <li Class="ThinkNode_ConditionalOfPlayerFaction">
          <subNodes>

            <!-- Take care of critical needs (below rescue - so heroic!)-->
            
            <li Class="ThinkNode_Tagger">
              <tagToGive>RestingForMedicalReasons</tagToGive>
              <subNodes>
                <li Class="JobGiver_PatientGoToBed" />
              </subNodes>
            </li>
            
            <li Class="JobGiver_SeekAllowedArea" />
            <li Class="JobGiver_SeekSafeTemperature" />
            
          </subNodes>
        </li>

        <!-- Insertion hook for modders -->
        <li Class="ThinkNode_SubtreesByTag">
          <insertTag>Golem_PreWander</insertTag>
        </li>
		
		<!-- Tame golem: wander near colony if possible -->
		<li Class="MorrowRim_Telvanni.ThinkNode_ConditionalGolemWorkCore">
			<coreHediff>MorrowRim_GolemCore_WorkSentry</coreHediff>
			<inverse>true</inverse>
			<subNodes>
				<li Class="ThinkNode_ConditionalOfPlayerFaction">
				  <subNodes>
					<li Class="ThinkNode_Tagger">
					  <tagToGive>Idle</tagToGive>
					  <subNodes>
						<!-- Wander near your current position if in hostile map -->
						<li Class="ThinkNode_ConditionalAnyEnemyInHostileMap">
						  <subNodes>
							<li Class="JobGiver_WanderAnywhere">
							  <maxDanger>None</maxDanger>
							  <ticksBetweenWandersRange>120~240</ticksBetweenWandersRange>
							</li>
						  </subNodes>
						</li>

						<!-- Wander near colony -->
						<li Class="JobGiver_WanderColony">
						  <maxDanger>None</maxDanger>
						  <ticksBetweenWandersRange>120~240</ticksBetweenWandersRange>
						</li>
					  </subNodes>
					</li>
				  </subNodes>
				</li>
			</subNodes>
		</li>

        <!-- Of neutral faction: rest and then exit the map -->
        <li Class="ThinkNode_ConditionalNonPlayerNonHostileFaction">
          <subNodes>
            <li Class="ThinkNode_Tagger">
              <tagToGive>RestingForMedicalReasons</tagToGive>
              <subNodes>
                <li Class="JobGiver_PatientGoToBed" />
              </subNodes>
            </li>
            
            <li Class="ThinkNode_Tagger">
              <tagToGive>Misc</tagToGive>
              <subNodes>
                <li Class="JobGiver_ExitMapBest">
                  <defaultLocomotion>Walk</defaultLocomotion>
                </li>
              </subNodes>
            </li>
          </subNodes>
        </li>
        
        <!-- Wild wander, modified to prevent wandering if sentry core is installed -->
		<li Class="MorrowRim_Telvanni.ThinkNode_ConditionalGolemWorkCore">
			<coreHediff>MorrowRim_GolemCore_WorkSentry</coreHediff>
			<inverse>true</inverse>
			<subNodes>
				<li Class="ThinkNode_Tagger">
				  <tagToGive>Idle</tagToGive>
				  <subNodes>
					<li Class="ThinkNode_ConditionalHerdAnimal">
					  <subNodes>
						<li Class="JobGiver_WanderHerd">
						  <maxDanger>Deadly</maxDanger>
						  <ticksBetweenWandersRange>120~240</ticksBetweenWandersRange>
						</li>
					  </subNodes>
					</li>
					
					<li Class="JobGiver_WanderAnywhere">
					  <maxDanger>Deadly</maxDanger>
					  <ticksBetweenWandersRange>120~240</ticksBetweenWandersRange>    
					</li>
				  </subNodes>
				</li>
			</subNodes>
		</li>
		
		<li Class="ThinkNode_Tagger">
			<tagToGive>Idle</tagToGive>
		</li>
		
      </subNodes>
    </thinkRoot>
  </ThinkTreeDef>

  <ThinkTreeDef>
    <defName>MorrowRim_GolemThinkTreeConstant</defName>
    <thinkRoot Class="ThinkNode_Priority">
      <subNodes>
        <li Class="ThinkNode_ConditionalCanDoConstantThinkTreeJobNow">
          <subNodes>
            <!-- Flee explosion -->
            <li Class="JobGiver_FleePotentialExplosion" />

            <!-- Join auto joinable caravan -->
            <li Class="ThinkNode_Subtree">
              <treeDef>JoinAutoJoinableCaravan</treeDef>
            </li>
			
			<!-- Hostility response -->
            <li Class="JobGiver_ConfigurableHostilityResponse" />
            
            <!-- Lord directives -->
            <li Class="ThinkNode_Subtree">
              <treeDef>LordDutyConstant</treeDef>
            </li>
          </subNodes>
        </li>
      </subNodes>
    </thinkRoot>
  </ThinkTreeDef>

</Defs>
